{"version":3,"sources":["test/cpanvideos.spec.ts"],"names":[],"mappings":"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","file":"cpanvideos.spec.js","sourcesContent":["declare var require: any;\ndeclare var done: any;\n\nimport { cspanvids } from '../src';\nimport { dummyData } from './dummydata';\n\nimport * as chai from 'chai';\nimport * as mocha from 'mocha';\nimport * as request from 'request';\nimport * as chalk from 'chalk';\n\nconst expect = chai.expect;\n\n\ndescribe(\"cspanvideos\", () => {\n\n  it(\"Should have the proper url.\", () => {\n    expect(cspanvids.CSPAN_BASE_URL).to.equal(\"https://www.c-span.org/person/?\");\n  });\n\n\n  it(\"Should have the _makeRequest method available\", () => {\n    expect(cspanvids).to.have.property(\"_makeRequest\")\n  });\n\n\n  describe(\"_parseRequestForData\", () => {\n    const mockDom = dummyData().mockCSPANDom;\n    const rp = cspanvids._parseRequestForData(mockDom);\n\n    it(\"Should detect proper amount of li elements\", () => {\n      expect(rp.length).to.be.equal(6);\n    });\n\n    it(\"Should provide proper for each element\", () => {\n      expect(rp[0].thumbnail).to.be.a('string');\n      expect(rp[3].date).to.be.a('string');\n      expect(rp[4].title).to.be.a('string');\n    })\n  });\n\n  describe(\"_isBadURL\", () => {\n    it(\"Should get the proper URL when a bad one is provided\", () => {\n      request(cspanvids.CSPAN_BAD_URL + \"Ted Cruz\", (err: Error, response: request.RequestResponse, body: string) => {\n        const isBadURL = cspanvids._isBadURL(body);\n\n        expect(isBadURL).to.be.true;\n      })\n    })\n  });\n\n  describe(\"fetchVideoData\", () => {\n\n    it (\"Should work as expected for a normal name format\", (done) => {\n      cspanvids.fetchVideoData(\"Marco Rubio\")\n      .then((data) => {\n        expect(data.length).to.be.above(3);\n        expect(data[0].embed_url).to.be.a(\"string\");\n      })\n      .then(() => done(), done)\n    });\n    \n    it(\"Should work with a weird name format\", (done) => {\n      cspanvids.fetchVideoData(\"marcorubio\")\n      .then((data) => {\n        expect(data.length).to.be.above(3)\n        expect(data[0].embed_url).to.be.a(\"string\");\n      }).then(() => done(), done)\n    });\n    \n    /**\n     * For example, Ted Cruz's name in the url\n     * would be \"rcruz\". Need to handle that.\n     */\n    it(\"Should work with a name that diffs from url\", (done) => {\n      cspanvids.fetchVideoData(\"Ted Cruz\")\n        .then((data) => {\n          expect(data.length).to.be.above(3);\n        }).then(() => done(), done)\n    });\n\n    it(\"Should work with a nonsense name\", (done) => {\n      cspanvids.fetchVideoData(\"aragsseafe\")\n        .then((data) => {\n          expect(typeof data).to.be.an(undefined);\n        })\n      .then(() => done(), done);\n    })\n  })\n});\n"]}